name: auto-deploy-server

on: 
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    -
      shell: bash
      env:
        CLOUD_STORAGE: ${{ secrets.CLOUD_STORAGE }}
      run: |
          echo "$CLOUD_STORAGE" > storagecredential.json
    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    -
      name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/tailoring-python:latest
    
  deploy:
    needs: build
    runs-on: ubuntu-latest # Run this job on the latest Ubuntu version

    steps:
      - name: Checkout
        uses: actions/checkout@v2 # Check out your repository code

      - name: SSH and run commands
        env:
          PRIVATE_KEY: ${{ secrets.KEY }} # Reference the private key stored in GitHub Secrets
        run: |
          echo "$PRIVATE_KEY" > private_key.pem # Write the private key to a file
          chmod 600 private_key.pem # Set the appropriate permissions for the key file

          # Establish an SSH connection and execute commands on the remote server
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.USERNAME }}@${{ secrets.HOST }} <<EOF
            # Your server commands go here. Replace these commands with those relevant to your project.

            docker run -d -p 80:8000 -e APP_ENV=dev -e DBUSER=$DBUSER -e DBPASSWORD=$DBPASSWORD -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBNAME=$DBNAME -e JWT=$JWT -e GCP_CREDENTIAL=$GCP_CREDENTIAL -e GCP_PROJECTID=${{ secrets.GCP_PROJECTID }} -e GCP_BUCKETNAME=$GCP_BUCKETNAME -e GCP_PATH=$GCP_PATH --name ${{ secrets.CNAME }} ${{ secrets.DOCKERHUB_USERNAME }}/tailoring-python:latest
          EOF

          rm -f private_key.pem # Remove the private key file after use for security
    permissions:
      contents: read
      actions: write
      id-token: write
        
  #  - 
  #    name: multiple command
  #    uses: appleboy/ssh-action@v0.1.9
  #    env:
  #      DBUSER: ${{ secrets.DBUSER }}
  #      DBPASSWORD: ${{ secrets.DBPASSWORD }}
  #      DBHOST: ${{ secrets.DBHOST }}
  #      DBPORT: ${{ secrets.DBPORT }}
  #      DBNAME: ${{ secrets.DBNAME }}
  #      JWT: ${{ secrets.JWT }}
  #      GCP_CREDENTIAL: ${{ secrets.GCP_CREDENTIAL }}
  #      GCP_PROJECTID: ${{ secrets.GCP_PROJECTID }}
  #      GCP_BUCKETNAME: ${{ secrets.GCP_BUCKETNAME }}
  #      GCP_PATH: ${{ secrets.GCP_PATH }}
        
  #    with:
  #      host: ${{ secrets.HOST }}
  #      username: ${{ secrets.USERNAME }}
  #      key: ${{ secrets.KEY }}
  #      port: ${{ secrets.PORT }}
  #      script: |
  #        echo $DBPASSWORD
  #        docker stop ${{ secrets.CNAME }}
  #        docker rm ${{ secrets.CNAME }}
  #        docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/tailoring-python:latest
  #        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tailoring-python:latest
  #        docker run -d -p 80:8000 -e APP_ENV=dev -e DBUSER=$DBUSER -e DBPASSWORD=$DBPASSWORD -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBNAME=$DBNAME -e JWT=$JWT -e GCP_CREDENTIAL=$GCP_CREDENTIAL -e GCP_PROJECTID=${{ secrets.GCP_PROJECTID }} -e GCP_BUCKETNAME=$GCP_BUCKETNAME -e GCP_PATH=$GCP_PATH --name ${{ secrets.CNAME }} ${{ secrets.DOCKERHUB_USERNAME }}/tailoring-python:latest
